name: Crear ZIP en respuesta a nuevo Issue

on:
  issues:
    types:
      - opened
      - edited

jobs:
  create-zip:
    runs-on: ubuntu-latest
    steps:
      - name: Verificar etiqueta
        run: |
          curl -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments \
          -d '{
            "body": "Hola, gracias por crear este Issue. Por favor, proporciona los siguientes datos para generar el archivo ZIP:\n\n- repositoryURL: \n- language: \n- symbol: \n- year: "
          }'
      
      - name: Esperar respuesta del usuario
        id: wait-for-user-response
        run: echo "Esperando respuesta del usuario..."

      - name: Agregar comentario en el Issue
        run: |
          comment="Por favor, proporciona los datos solicitados."

          curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments \
            -d '{"body":"'"$comment"'"}'
      
      - name: Procesar respuesta del usuario
        if: steps.wait-for-user-response.outputs.result == 'success'
        run: |
          # Recopilar los datos del usuario desde la conversación del Issue
          repositoryURL=$(jq -r '.comment.body' ${{ steps.wait-for-user-response.outputs.response-file }} | grep -oP 'repositoryURL:\s*\K[^\n]*')
          language=$(jq -r '.comment.body' ${{ steps.wait-for-user-response.outputs.response-file }} | grep -oP 'language:\s*\K[^\n]*')
          symbol=$(jq -r '.comment.body' ${{ steps.wait-for-user-response.outputs.response-file }} | grep -oP 'symbol:\s*\K[^\n]*')
          year=$(jq -r '.comment.body' ${{ steps.wait-for-user-response.outputs.response-file }} | grep -oP 'year:\s*\K[^\n]*')

      - name: Descargar todos los archivos del repositorio y crear ZIP
        run: |
          git clone $repositoryURL repo
      
          repo_name=$(basename $repositoryURL)
          
          cd repo
          git archive -o temp-files/repo_files.zip HEAD
        env:
          repositoryURL: ${{ steps.wait-for-user-response.outputs.repositoryURL }}

      - name: Agregar el archivo ZIP a la conversación del Issue
        run: |      
          # Subir el archivo ZIP a GitHub
          response=$(curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/zip" \
            --data-binary @repo_files.zip \
            "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/attachments")
      
          # Extraer la URL del archivo cargado
          attachment_url=$(echo "$response" | jq -r .url)
      
          # Agregar un comentario con el enlace al archivo
          comment="Aquí tienes el archivo ZIP: $attachment_url"
      
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments" \
            -d "{
              \"body\": \"$comment\"
            }"
