name: Crear ZIP en respuesta a nuevo Issue

on:
  issues:
    types:
      - opened

jobs:
  create-zip:
    runs-on: ubuntu-latest
    steps:
      - name: Verificar etiqueta
        if: contains(github.event.issue.labels.*.name, 'Nuevo JWPUB')
        run: |
          # Comentario inicial en la conversación del Issue para solicitar información
          curl -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments \
          -d '{
            "body": "Hola, gracias por crear este Issue. Por favor, proporciona los siguientes datos para generar el archivo ZIP:\n\n- repositoryURL: \n- language: \n- symbol: \n- year: "
          }'
      
      - name: Esperar respuesta del usuario
        id: wait-for-user-response
        run: echo "Esperando respuesta del usuario..."

      - name: Agregar comentario en el Issue
        run: |
          comment="Por favor, proporciona los datos solicitados."
          issue_number=${{ github.event.issue.number }}
          
          curl -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/issues/${issue_number}/comments \
            -d '{
              "body": "'"$comment"'"
            }'
      
      - name: Procesar respuesta del usuario
        if: steps.wait-for-user-response.outputs.result == 'success'
        run: |
          # Recopilar los datos del usuario desde la conversación del Issue
          repositoryURL=$(jq -r '.comment.body' ${{ steps.wait-for-user-response.outputs.response-file }} | grep -oP 'repositoryURL:\s*\K[^\n]*')
          language=$(jq -r '.comment.body' ${{ steps.wait-for-user-response.outputs.response-file }} | grep -oP 'language:\s*\K[^\n]*')
          symbol=$(jq -r '.comment.body' ${{ steps.wait-for-user-response.outputs.response-file }} | grep -oP 'symbol:\s*\K[^\n]*')
          year=$(jq -r '.comment.body' ${{ steps.wait-for-user-response.outputs.response-file }} | grep -oP 'year:\s*\K[^\n]*')

          # Descargar los archivos desde repositoryURL y crear el archivo ZIP
          # Aquí debes implementar la lógica para descargar y crear el ZIP

          # Agregar el archivo ZIP a la conversación del Issue
          # Aquí debes implementar la lógica para agregar el archivo ZIP a la conversación

          # Marcar el Issue como resuelto
          curl -X PATCH -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }} \
          -d '{
            "state": "closed"
          }'
